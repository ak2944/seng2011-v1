swagger: "2.0"
info:
  title: FiveApple API
  version: "1.0.0"
tags:
  - name: "Sprint 2"
    description: "Sprint 2 routes"
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/order/parse:
    post:
      tags:
        - "Sprint 2"
      summary: "Parse UBL Order XML"
      consumes:
        - application/xml
        - text/xml
      parameters:
        - in: body
          name: orderXml
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful parse of Order XML"
          schema:
            $ref: "#/definitions/ParsedOrder"
        "400":
          description: "No XML found"
          schema:
            type: object
            properties:
              error:
                type: string
        "500":
          description: "Parse error"
          schema:
            type: object
            properties:
              error:
                type: string

  /api/v1/despatch-advice/generate:
    post:
      tags:
        - "Sprint 2"
      summary: "Generate Despatch Advice"
      consumes:
        - application/json
      parameters:
        - in: body
          name: DespatchAdviceRequest
          required: true
          schema:
            $ref: "#/definitions/DespatchAdviceRequest"
      responses:
        "200":
          description: "Generated successfully"
          schema:
            type: string
            example: "<DespatchAdvice>...</DespatchAdvice>"
        "400":
          description: "Missing parsedOrder"
        "409":
          description: "Duplicate UUID exists"
        "500":
          description: "Generation error"

  /api/v1/despatch-advice/{uuid}:
    get:
      tags:
        - "Sprint 2"
      summary: "Get Despatch Advice by UUID"
      parameters:
        - in: path
          name: uuid
          required: true
          type: string
      responses:
        "200":
          description: "Despatch Advice found"
          schema:
            type: string
            example: "<DespatchAdvice>...</DespatchAdvice>"
        "404":
          description: "Not found"
        "500":
          description: "Retrieval error"

  /add-mock-user:
    post:
      tags:
        - "Sprint 2"
      summary: "Add a mock user"
      responses:
        "201":
          description: "User added"
        "500":
          description: "Server error"

  /login:
    post:
      tags:
        - "Sprint 2"
      summary: "Simulate user login, return JWT"
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
      responses:
        "200":
          description: "Token generated"
          schema:
            type: object
            properties:
              accessToken:
                type: string
        "400":
          description: "Username required"

  /despatch-advice:
    get:
      tags:
        - "Sprint 2"
      summary: "Protected route for despatch advice"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Authorized access"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

definitions:
  ParsedOrder:
    type: object
    properties:
      orderId: { type: string }
      salesOrderId: { type: string }
      orderUUID: { type: string }
      orderIssueDate: { type: string }
      note: { type: string }
      buyerAccountId: { type: string }
      buyerName: { type: string }
      buyerAddress: { $ref: "#/definitions/UBLAddress" }
      sellerAccountId: { type: string }
      sellerName: { type: string }
      sellerAddress: { $ref: "#/definitions/UBLAddress" }
      deliveryAddress: { $ref: "#/definitions/UBLAddress" }
      requestedDeliveryStartDate: { type: string }
      requestedDeliveryEndDate: { type: string }
      orderLine: { $ref: "#/definitions/UBLOrderLine" }

  UBLAddress:
    type: object
    properties:
      streetName: { type: string }
      buildingName: { type: string }
      buildingNumber: { type: string }
      cityName: { type: string }
      postalZone: { type: string }
      countrySubentity: { type: string }
      addressLine: { type: string }
      countryCode: { type: string }

  UBLOrderLine:
    type: object
    properties:
      lineId: { type: string }
      salesOrderLineId: { type: string }
      lineStatusCode: { type: string }
      quantity: { type: string }
      quantityUnitCode: { type: string }
      lineExtensionAmount: { type: string }
      itemName: { type: string }
      itemDescription: { type: string }
      buyersItemId: { type: string }
      sellersItemId: { type: string }

  DespatchAdviceRequest:
    type: object
    properties:
      parsedOrder: { $ref: "#/definitions/ParsedOrder" }
      userInputs:
        type: object
        properties:
          orderId: { type: string }
          shipmentDetails:
            type: object
            properties:
              despatchDate: { type: string }
              carrier: { type: string }
              trackingNumber: { type: string }
          deliveryAddress:
            type: object
            properties:
              name: { type: string }
              street: { type: string }
              city: { type: string }
              state: { type: string }
              country: { type: string }
              postalCode: { type: integer }
          despatchSupplierParty:
            type: object
            properties:
              name: { type: string }
              address: { type: string }
          items:
            type: array
            items:
              type: object
              properties:
                orderLineId: { type: integer }
                deliveredQuantity: { type: number }
                unitCode: { type: string }

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /api/v1/order/parse:
    post:
      tags:
        - "Sprint 2"
      summary: "Parse UBL Order XML"
      consumes:
        - application/xml
        - text/xml
      parameters:
        - in: body
          name: orderXml
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful parse of Order XML"
          schema:
            $ref: "#/definitions/ParsedOrder"
        "400":
          description: "No XML found"
          schema:
            type: object
            properties:
              error:
                type: string
        "500":
          description: "Parse error"
          schema:
            type: object
            properties:
              error:
                type: string

  /api/v1/despatch-advice/generate:
    post:
      tags:
        - "Sprint 2"
      summary: "Generate Despatch Advice"
      consumes:
        - application/json
      parameters:
        - in: body
          name: DespatchAdviceRequest
          required: true
          schema:
            $ref: "#/definitions/DespatchAdviceRequest"
      responses:
        "200":
          description: "Generated successfully"
          schema:
            type: string
            example: "<DespatchAdvice>...</DespatchAdvice>"
        "400":
          description: "Missing parsedOrder"
        "409":
          description: "Duplicate UUID exists"
        "500":
          description: "Generation error"

  /api/v1/despatch-advice/{uuid}:
    get:
      tags:
        - "Sprint 2"
      summary: "Get Despatch Advice by UUID"
      parameters:
        - in: path
          name: uuid
          required: true
          type: string
      responses:
        "200":
          description: "Despatch Advice found"
          schema:
            type: string
            example: "<DespatchAdvice>...</DespatchAdvice>"
        "404":
          description: "Not found"
        "500":
          description: "Retrieval error"

  /add-mock-user:
    post:
      tags:
        - "Sprint 2"
      summary: "Add a mock user"
      responses:
        "201":
          description: "User added"
        "500":
          description: "Server error"

  /login:
    post:
      tags:
        - "Sprint 2"
      summary: "Simulate user login, return JWT"
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
      responses:
        "200":
          description: "Token generated"
          schema:
            type: object
            properties:
              accessToken:
                type: string
        "400":
          description: "Username required"

  /despatch-advice:
    get:
      tags:
        - "Sprint 2"
      summary: "Protected route for despatch advice"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Authorized access"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

definitions:
  ParsedOrder:
    type: object
    properties:
      orderId: { type: string }
      salesOrderId: { type: string }
      orderUUID: { type: string }
      orderIssueDate: { type: string }
      note: { type: string }
      buyerAccountId: { type: string }
      buyerName: { type: string }
      buyerAddress: { $ref: "#/definitions/UBLAddress" }
      sellerAccountId: { type: string }
      sellerName: { type: string }
      sellerAddress: { $ref: "#/definitions/UBLAddress" }
      deliveryAddress: { $ref: "#/definitions/UBLAddress" }
      requestedDeliveryStartDate: { type: string }
      requestedDeliveryEndDate: { type: string }
      orderLine: { $ref: "#/definitions/UBLOrderLine" }

  UBLAddress:
    type: object
    properties:
      streetName: { type: string }
      buildingName: { type: string }
      buildingNumber: { type: string }
      cityName: { type: string }
      postalZone: { type: string }
      countrySubentity: { type: string }
      addressLine: { type: string }
      countryCode: { type: string }

  UBLOrderLine:
    type: object
    properties:
      lineId: { type: string }
      salesOrderLineId: { type: string }
      lineStatusCode: { type: string }
      quantity: { type: string }
      quantityUnitCode: { type: string }
      lineExtensionAmount: { type: string }
      itemName: { type: string }
      itemDescription: { type: string }
      buyersItemId: { type: string }
      sellersItemId: { type: string }

  DespatchAdviceRequest:
    type: object
    properties:
      parsedOrder: { $ref: "#/definitions/ParsedOrder" }
      userInputs:
        type: object
        properties:
          orderId: { type: string }
          shipmentDetails:
            type: object
            properties:
              despatchDate: { type: string }
              carrier: { type: string }
              trackingNumber: { type: string }
          deliveryAddress:
            type: object
            properties:
              name: { type: string }
              street: { type: string }
              city: { type: string }
              state: { type: string }
              country: { type: string }
              postalCode: { type: integer }
          despatchSupplierParty:
            type: object
            properties:
              name: { type: string }
              address: { type: string }
          items:
            type: array
            items:
              type: object
              properties:
                orderLineId: { type: integer }
                deliveredQuantity: { type: number }
                unitCode: { type: string }

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header