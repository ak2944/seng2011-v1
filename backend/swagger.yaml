swagger: "2.0"
info:
  title: "FiveApple API"
  version: "1.0.0"

tags:
  - name: "Health"
    description: "Health check endpoints"
  - name: "Order"
    description: "Order-related endpoints"
  - name: "DespatchAdvice"
    description: "Despatch Advice endpoints"
  - name: "User"
    description: "User-related endpoints"
  - name: "Auth"
    description: "Authentication and Protected endpoints"

schemes:
  - https
basePath: "/"
consumes:
  - application/json
produces:
  - application/json

############################
# SECURITY DEFINITIONS
############################
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

############################
# PATHS
############################
paths:
  ####################
  # Health check
  ####################
  /health:
    get:
      tags:
        - "Health"
      summary: "Check if server is running"
      description: "Returns 200 OK if the server is alive."
      responses:
        "200":
          description: "Server is running"

  ####################
  # Parse Order
  ####################
  /api/v1/order/parse:
    post:
      tags:
        - "Order"
      summary: "Parse a UBL Order XML"
      description: "Expects raw UBL Order XML in the request body; returns a parsed JSON object."
      consumes:
        - application/xml
        - text/xml
      parameters:
        - in: body
          name: orderXml
          description: "Raw XML string of a UBL Order"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful parse of Order XML"
          schema:
            type: object
            properties:
              parsedOrder:
                $ref: "#/definitions/ParsedOrder"
          examples:
            application/json:
              parsedOrder:
                orderId: "ABC123"
                orderUUID: "c70bf1af-a0b1-46a3-9f3c-5be888f6112c"
        "400":
          description: "No XML found in request body"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Parse error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  ####################
  # Despatch Advice
  ####################
  /api/v1/despatch-advice/generate:
    post:
      tags:
        - "DespatchAdvice"
      summary: "Generate Despatch Advice"
      description: "Generates a UBL Despatch Advice XML from a parsed Order plus user overrides."
      consumes:
        - application/json
      parameters:
        - in: body
          name: DespatchAdviceRequest
          required: true
          schema:
            $ref: "#/definitions/DespatchAdviceRequest"
      responses:
        "200":
          description: "Generated successfully"
          schema:
            type: string
            example: "<DespatchAdvice>...</DespatchAdvice>"
        "400":
          description: "Missing parsedOrder"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "409":
          description: "Duplicate UUID. A Despatch Advice with the same UUID already exists."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Generation error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /api/v1/despatch-advice/{uuid}:
    get:
      tags:
        - "DespatchAdvice"
      summary: "Get Despatch Advice by UUID (XML)"
      produces:
        - application/xml
      parameters:
        - in: path
          name: uuid
          required: true
          type: string
      responses:
        "200":
          description: "Despatch Advice found (XML)"
          schema:
            type: string
          examples:
            application/xml: "<DespatchAdvice>...</DespatchAdvice>"
        "404":
          description: "Despatch Advice not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Retrieval error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /api/v1/despatch-advice/{uuid}/pdf:
    get:
      tags:
        - "DespatchAdvice"
      summary: "Get Despatch Advice as PDF"
      description: "Converts the stored Despatch Advice XML into a PDF and returns it as a binary."
      produces:
        - application/pdf
      parameters:
        - in: path
          name: uuid
          required: true
          type: string
      responses:
        "200":
          description: "PDF generated"
          schema:
            type: file
        "404":
          description: "Despatch Advice not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Failed to convert to PDF"
          schema:
            $ref: "#/definitions/ErrorResponse"

  ####################
  # Add mock user
  ####################
  /add-mock-user:
    post:
      tags:
        - "User"
      summary: "Add a mock user"
      description: "Creates a random user (John Doe) for testing, returns 201 on success."
      responses:
        "201":
          description: "User added"
          schema:
            type: object
            properties:
              message:
                type: string
              user:
                $ref: "#/definitions/User"
        "500":
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  ####################
  # Auth
  ####################
  /login:
    post:
      tags:
        - "Auth"
      summary: "User login, returns JWT"
      description: "Expects JSON with 'email' and 'password'."
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        "200":
          description: "Login successful; returns JWT token."
          schema:
            $ref: "#/definitions/JWTResponse"
        "400":
          description: "Missing or invalid credentials"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /despatch-advice:
    get:
      tags:
        - "Auth"
      summary: "Protected route: only accessible with valid token"
      description: "Returns user data if token is valid."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Authorized access"
          schema:
            type: object
            properties:
              message:
                type: string
              user:
                type: object
                description: "Decoded JWT content"
        "401":
          description: "No token provided"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: "Invalid or expired token"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /register:
    post:
      tags:
        - "Auth"
      summary: "Register a new user"
      description: "Creates a new user account, then returns a JWT upon success."
      parameters:
        - in: body
          name: registrationData
          required: true
          schema:
            $ref: "#/definitions/RegisterRequest"
      responses:
        "200":
          description: "New user created, returns JWT token"
          schema:
            type: object
            properties:
              token:
                type: string
        "400":
          description: "Email already in-use"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ErrorResponse"

############################
# DEFINITIONS (MODELS)
############################
definitions:
  ########################
  #  Generic Error
  ########################
  ErrorResponse:
    type: object
    properties:
      error:
        type: string
    example:
      error: "Something went wrong"

  ########################
  #  Auth Models
  ########################
  LoginRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        example: "testuser@example.com"
      password:
        type: string
        example: "password123"

  RegisterRequest:
    type: object
    required:
      - email
      - password
      - name
    properties:
      name:
        type: string
        example: "John Doe"
      email:
        type: string
        example: "john@example.com"
      password:
        type: string
        example: "strongpass1"

  JWTResponse:
    type: object
    properties:
      accessToken:
        type: string
    example:
      accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  ########################
  #  User Model
  ########################
  User:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      email:
        type: string
      password:
        type: string
    example:
      _id: "64f9a4491c5f4c1aef69477b"
      name: "John Doe"
      email: "johndoe1234@example.com"
      password: "$2b$10$BtiR..."

  ########################
  #  Parsed Order
  ########################
  ParsedOrder:
    type: object
    properties:
      orderId:
        type: string
      salesOrderId:
        type: string
      orderUUID:
        type: string
      orderIssueDate:
        type: string
      note:
        type: string
      buyerAccountId:
        type: string
      buyerName:
        type: string
      buyerAddress:
        $ref: "#/definitions/UBLAddress"
      sellerAccountId:
        type: string
      sellerName:
        type: string
      sellerAddress:
        $ref: "#/definitions/UBLAddress"
      deliveryAddress:
        $ref: "#/definitions/UBLAddress"
      requestedDeliveryStartDate:
        type: string
      requestedDeliveryEndDate:
        type: string
      orderLine:
        $ref: "#/definitions/UBLOrderLine"

  UBLAddress:
    type: object
    properties:
      streetName:
        type: string
      buildingName:
        type: string
      buildingNumber:
        type: string
      cityName:
        type: string
      postalZone:
        type: string
      countrySubentity:
        type: string
      addressLine:
        type: string
      countryCode:
        type: string

  UBLOrderLine:
    type: object
    properties:
      lineId:
        type: string
      salesOrderLineId:
        type: string
      lineStatusCode:
        type: string
      quantity:
        type: string
      quantityUnitCode:
        type: string
      lineExtensionAmount:
        type: string
      itemName:
        type: string
      itemDescription:
        type: string
      buyersItemId:
        type: string
      sellersItemId:
        type: string

  ########################
  #  Despatch Advice
  ########################
  DespatchAdviceRequest:
    type: object
    properties:
      parsedOrder:
        $ref: "#/definitions/ParsedOrder"
      userInputs:
        type: object
        properties:
          despatchId:
            type: string
          despatchUUID:
            type: string
          deliveredQuantity:
            type: string
          backorderQuantity:
            type: string
          backorderReason:
            type: string
          shipmentStartDate:
            type: string
          shipmentEndDate:
            type: string
          despatchLineNote:
            type: string
          lotNumberID:
            type: string
          lotExpiryDate:
            type: string
    example:
      parsedOrder:
        orderId: "ORD-001"
        salesOrderId: "SO-XYZ"
        orderUUID: "23b8591b-b23e-4f65-8b24-345df906f957"
        orderIssueDate: "2025-03-10"
        note: "Urgent shipment"
        buyerAccountId: "CUST-100"
        buyerName: "Acme Buyer"
        buyerAddress:
          streetName: "Main Street"
          buildingName: "Acme Towers"
          buildingNumber: "101"
          cityName: "Metropolis"
          postalZone: "12345"
          countrySubentity: "ExampleState"
          addressLine: "Suite 200"
          countryCode: "US"
        sellerAccountId: "SELL-200"
        sellerName: "Acme Supplier"
        sellerAddress:
          streetName: "Supplier Road"
          buildingName: "Supplier Building"
          buildingNumber: "99"
          cityName: "SupplierCity"
          postalZone: "54321"
          countrySubentity: "SupplierState"
          addressLine: "Warehouse 3"
          countryCode: "US"
        deliveryAddress:
          streetName: "Delivery Avenue"
          buildingName: "Deliv HQ"
          buildingNumber: "42"
          cityName: "ShippingTown"
          postalZone: "99999"
          countrySubentity: "ShipState"
          addressLine: "Dock 4"
          countryCode: "US"
        requestedDeliveryStartDate: "2025-03-15"
        requestedDeliveryEndDate: "2025-03-20"
        orderLine:
          lineId: "1"
          salesOrderLineId: "SO-LINE-1"
          lineStatusCode: "Active"
          quantity: "100"
          quantityUnitCode: "PCS"
          lineExtensionAmount: "1000.00"
          itemName: "Widgets"
          itemDescription: "Standard Widgets"
          buyersItemId: "B-123"
          sellersItemId: "S-123"
      userInputs:
        despatchId: "DS-100"
        despatchUUID: "23b8591b-b23e-4f65-8b24-345df906f957"
        deliveredQuantity: "100"
        backorderQuantity: "0"
        backorderReason: ""
        shipmentStartDate: "2025-03-15"
        shipmentEndDate: "2025-03-20"
        despatchLineNote: "Handle with care"
        lotNumberID: "LOT-ABC"
        lotExpiryDate: "2026-01-01"
